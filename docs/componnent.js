module.exports = {
  components: {
    securitySchemes: {
      bearerAuth: {
        type: "http",
        scheme: "bearer",
        bearerFormat: "JWT",
        description: "JWT authorization header usimg bearer scheme",
      },
    },
    schemas: {
      // id model
      User: {
        type: "object",
        description: "A user of the pokedex",
        example: {
          id: 25,
          username: "johndoe",
          password: "apassword",
        },
        required: ["id", "username", "password"],
        properties: {
          id: {
            type: "integer",
            description:
              "User Unique Identifier Number, automatically generated by sequelize",
            example: 25,
          },
          username: {
            type: "string",
            description: "the username of a user",
            example: "johndoe",
          },
          password: {
            type: "string",
            description: "the password of a user",
            example: "apassword",
          },
        },
      },

      Pokemon: {
        type: "object",
        description: "this object represent a pokemon",
        example: {
          id: 12,
          name: "Groupix",
          hp: 17,
          cp: 8,
          picture:
            "https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png",
          types: ["Feu"],
          created: "2023-10-08T22:46:22.693Z",
        },
        required: ["id", "name", "hp", "cp", "created", "types", "picture"],
        properties: {
          id: {
            type: "integer",
          },
          name: {
            type: "string",
            description: "each name must be unique",
            example: "groupix",
            minLength: 3,
            maxLength: 20,
          },
          hp: {
            type: "integer",
            minimum: 0,
            maximum: 100,
            description: `It represent the amount of health points of the Pokemon
              It must be more than 0 and less than 100`,
          },
          cp: {
            type: "integer",
            minimum: 0,
            maximum: 50,
            description: `It's representation of attack and kills level of the Pokemon
              It must be more than 0 and less than 50`,
          },
          picture: {
            type: "string",
            description: "It's an url targeting on a picture of the pokemon",
            example:
              "https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png",
          },
          types: {
            type: "array",
            items: {
              type: "string",
            },
            maxItems: 3,
            minItems: 1,
            example: ["feu", "terre"],
          },
          created: {
            type: "string",
            format: "date-time",
            description:
              "is the date of creation of the pokemon. should not be modified.",
            example: "2023-10-08T22:46:22.693Z",
          },
        },
      },

      LoginResponse: {
        type: "object",
        example: {
          message: "connexion reussie",
          data: {
            id: 1,
            username: "johndoe",
            password: "apassword",
            createdAt: "2023-10-08T23:31:38.000Z",
            updatedAt: "2023-10-08T23:31:38.000Z",
          },
          token: "atoken",
        },
        properties: {
          message: {
            type: "string",
            description: "A message describing if it was a success or not",
            example: "connexion reussie",
          },

          data: {
            description: "is the data of the connected user",
            type: "object",
            properties: {
              id: {
                type: "integer",
                description:
                  "User Unique Identifier Number, automatically generated by sequelize",
                example: 25,
              },
              username: {
                type: "string",
                description: "the username of a user",
                example: "johndoe",
              },
              password: {
                type: "string",
                description: "the password of a user",
                example: "apassword",
              },
            },
          },
          token: {
            type: "string",
            description: "A token given for use in the entire app",
            example: "atoken",
          },
        },
      },

      LoginRequestBody: {
        type: "object",
        description:
          "the body of this request should only have username and password",
        properties: {
          username: {
            type: "string",
            description: "the username of a user",
            example: "johndoe",
          },
          password: {
            type: "string",
            description: "the password of a user",
            example: "apassword",
          },
        },
        required: ["username", "password"],
      },

      GetPokmonsResponse: {
        type: "object",
        example: {
          message: "voici la liste des pokemons",
          data: [
            {
              types: ["Poison"],
              id: 8,
              name: "Abo",
              hp: 16,
              cp: 4,
              picture:
                "https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png",
              created: "2023-10-09T00:13:12.000Z",
            },
            {
              types: ["Insecte", "Poison"],
              id: 4,
              name: "Aspicot",
              hp: 16,
              cp: 2,
              picture:
                "https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png",
              created: "2023-10-09T00:13:12.000Z",
            },
          ],
        },
        properties: {
          message: {
            type: "string",
            description: "A message describing if it was a success or not",
            example: "connexion reussie",
          },

          data: {
            description: "is the data of the connected user",
            type: "array",
            items: {
              type: "object",
              properties: {
                id: {
                  type: "integer",
                },
                name: {
                  type: "string",
                  description: "each name must be unique",
                  example: "groupix",
                  minLength: 3,
                  maxLength: 20,
                },
                hp: {
                  type: "integer",
                  minimum: 0,
                  maximum: 100,
                  description: `It represent the amount of health points of the Pokemon
                    It must be more than 0 and less than 100`,
                },
                cp: {
                  type: "integer",
                  minimum: 0,
                  maximum: 50,
                  description: `It's representation of attack and kills level of the Pokemon
                    It must be more than 0 and less than 50`,
                },
                picture: {
                  type: "string",
                  description:
                    "It's an url targeting on a picture of the pokemon",
                  example:
                    "https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png",
                },
                created: {
                  type: "string",
                  format: "date-time",
                  description:
                    "is the date of creation of the pokemon. should not be modified.",
                  example: "2023-10-08T22:46:22.693Z",
                },
              },
            },
          },
          token: {
            type: "string",
            description: "A token given for use in the entire app",
            example: "atoken",
          },
        },
      },

      // error model
      Error: {
        type: "object",
        properties: {
          message: {
            type: "string",
            description: "Error message",
            example: "Not found",
          },
          internal_code: {
            type: "string",
            description: "Error internal code",
            example: "Invalid parameters",
          },
        },
      },
    },
  },
};
